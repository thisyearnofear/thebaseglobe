import{aircraftManager}from"./AircraftManager";export class SelectionManager{constructor(){this.pilotOptions=[{id:"human",emoji:"👨🏼‍🦰",name:"Human"},{id:"frog",emoji:"🎩",name:"Frog"},{id:"nouns",emoji:"😎",name:"Nouns",tokenRequired:"zora"}],this.selectedPilot=null,this.selectedAircraft=null,this.startButton=null,this.startButtonTooltip=null,this.userAddress=null,this.hasToken=!1,this.zoraAccess=!1,document.addEventListener("DOMContentLoaded",(()=>{this.initSelectionScreen(),this.setupInfoModal(),this.startButton=document.getElementById("start-game"),this.startButtonTooltip=document.getElementById("start-game-tooltip"),this.startButton.addEventListener("click",(()=>this.handleStartClick())),this.startButton.addEventListener("mouseenter",(()=>this.showTooltip())),this.startButton.addEventListener("mouseleave",(()=>this.hideTooltip()))})),document.addEventListener("zoraAccessUpdated",(t=>{console.log("Zora access updated:",t.detail.hasAccess),this.zoraAccess=t.detail.hasAccess,this.updateZoraOptions()}));const t=localStorage.getItem("walletState");if(t){const{userAddress:e,hasToken:s}=JSON.parse(t);this.userAddress=e,this.hasToken=s}}async initSelectionScreen(){const t=document.getElementById("pilot-options"),e=document.getElementById("aircraft-options");t&&e?(this.userAddress=null,this.hasToken=!1,this.pilotOptions.forEach((e=>{const s=this.createSelectionOption(e,"pilot");e.tokenRequired&&s.classList.toggle("hidden",!this.hasToken),t.appendChild(s)})),aircraftManager.getAircraftOptions().forEach((t=>{const s=this.createSelectionOption(t,"aircraft");t.tokenRequired&&s.classList.toggle("hidden",!this.hasToken),e.appendChild(s)})),this.updateStartButton()):console.error("Selection containers not found in the DOM")}createSelectionOption(t,e){const s=document.createElement("div");s.classList.add("selection-option"),s.dataset.id=t.id,s.dataset.type=e;const o=document.createElement("span");o.textContent=t.emoji,o.classList.add("selection-emoji"),s.appendChild(o);const i=document.createElement("span");return i.textContent=t.name,i.classList.add("selection-name"),s.appendChild(i),s.addEventListener("click",(()=>this.selectOption(t.id,e))),s}selectOption(t,e){document.querySelectorAll(`.selection-option[data-type="${e}"]`).forEach((t=>t.classList.remove("selected")));const s=document.querySelector(`.selection-option[data-id="${t}"][data-type="${e}"]`);s&&(s.classList.add("selected"),"pilot"===e?this.selectedPilot=t:"aircraft"===e&&(this.selectedAircraft=t,aircraftManager.setSelectedAircraft(t))),this.updateStartButton()}updateStartButton(){this.startButton&&(this.selectedPilot&&this.selectedAircraft?(this.startButton.classList.add("visible"),this.startButton.disabled=!1):(this.startButton.classList.remove("visible"),this.startButton.disabled=!0))}handleStartClick(){this.startButton.disabled?(this.showTooltip(),setTimeout((()=>this.hideTooltip()),2e3)):this.startMap()}showTooltip(){if(this.startButton.disabled&&this.startButtonTooltip){this.startButtonTooltip.style.display="block",this.startButtonTooltip.classList.add("visible");const t=this.startButton.getBoundingClientRect();this.startButtonTooltip.style.top=`${t.bottom+10}px`,this.startButtonTooltip.style.left=`${t.left+t.width/2}px`,this.startButtonTooltip.offsetHeight,this.startButtonTooltip.style.opacity="1"}}hideTooltip(){this.startButtonTooltip&&(this.startButtonTooltip.style.opacity="0",setTimeout((()=>{this.startButtonTooltip.classList.remove("visible"),this.startButtonTooltip.style.display="none"}),300))}startMap(){if(!this.selectedPilot||!this.selectedAircraft)return void console.log("Please select both a pilot and an aircraft before starting the game");console.log("Starting map with selected pilot:",this.selectedPilot,"and aircraft:",this.selectedAircraft),document.getElementById("intro-screen").classList.add("hidden"),document.querySelector(".header").classList.add("game-started");const t=document.getElementById("score-wrapper");t.classList.remove("hidden"),setTimeout((()=>{t.classList.add("visible")}),50);const e=new CustomEvent("selectionComplete",{detail:{pilot:this.selectedPilot,aircraft:this.selectedAircraft}});document.dispatchEvent(e),console.log("selectionComplete event dispatched")}getSelection(){return{pilot:this.selectedPilot,aircraft:this.selectedAircraft}}async updateZoraOptions(){console.log("Updating Zora-gated options. Access:",this.zoraAccess),this.pilotOptions.forEach((t=>{const e=document.querySelector(`.selection-option[data-id="${t.id}"]`);e&&"zora"===t.tokenRequired&&(console.log(`Updating visibility for ${t.id}:`,!this.zoraAccess),e.classList.toggle("hidden",!this.zoraAccess))})),aircraftManager.getAircraftOptions().forEach((t=>{const e=document.querySelector(`.selection-option[data-id="${t.id}"]`);e&&"zora"===t.tokenRequired&&e.classList.toggle("hidden",!this.zoraAccess)})),this.updateStartButton()}setupInfoModal(){const t=document.getElementById("selection-info"),e=document.getElementById("info-modal"),s=document.querySelector(".close-info");if(!t||!e||!s)return void console.error("Info modal elements not found");const o=document.createElement("div");o.id="info-modal-container",o.style.position="absolute",o.style.zIndex="1000",document.body.appendChild(o),o.appendChild(e),t.addEventListener("click",(s=>{s.stopPropagation();const i=t.getBoundingClientRect();o.style.top=`${i.bottom+10}px`,o.style.left=`${i.left}px`,e.classList.remove("hidden")})),s.addEventListener("click",(t=>{t.stopPropagation(),e.classList.add("hidden")})),document.addEventListener("click",(s=>{e.contains(s.target)||s.target===t||e.classList.add("hidden")}))}}export const selectionManager=new SelectionManager;